#문장(statement) = 실행할 수 있는 코드의 최소단위 -> 엔터쳐서 정상적으로 실행되면 문장
#널문장(null statement) = 걍 엔터쳐도 다음줄로 넘어가는데 비어있는 문장이라해서 널문장
#문장아닌것 = SyntaxError 뜨면서 실행안되면 문장X -> 걍 실행안되면 문장아님

#표현식(expression) = 어떤 값을 만들어내는 코드
"10이라는 코드를 입력하면 10이라는 값을 만들어내서 10이라는 것도 하나의 표현식이자 문장."
"이처럼 값을 그대로 입력해서 값을 만들어내는방법을 리터럴(literal)이라 함."
"그래서 리터럴로 값을 만들어서 표현식이되는거고 그표현식이 표현이되니깐 문장이되는거다"
ex) 리터럴=10, 식별자(기호를빌려값을표현)=파이(3.145..), 
    2파이r 중 2는 리터럴 파이r은 식별자이다. print도 식별자다" 

#연산자(operator) = 혼자서는 어떠한 기능을하지않고 다른값과 결합되어 결과를 만들어내는것.
"** 제곱연산자, //정수나누기연산자, and or not 앤드 또는 낫 연산자"

#키워드(Keyword) = 숫자로는 나타낼수없는 연산자라던지 값이있음. 예를들어 참과 거짓을 나타내는 값으로 파이썬은 true와 false라는 글자를 제공. 이러한 글자들을 포함해서 and 등 글자연산자를 특별한 의미를 갖는 연산자라해서 키워드라한다

# 파이썬 자체가 강제하는 규칙
1. 키워드를 사용X       ex) if = 3.14 -> if는 키워드여서 오류발생함
2. 특수문자는 _만 허용  ex) $ = 3.14 다른기호사용후 값저장 or 사용하려할때 오류발생함 
3. 숫자로 시작X        ex) 10a = 3.14
4. 공백 포함X          ex) a b c = 3.14

#개발자들만의 규칙 = 스네이크케이스와 캐멀케이스를 사용하자.   ex)BeautifulSoup()클래스
1. 스네이크케이스(공백을_로 교체) :   send to user -> send_to_user ex)print()-함수
2. 캐멀케이스(대문자로 변경후 결합) : send to user -> SendToUser   ex)math.e-변수
